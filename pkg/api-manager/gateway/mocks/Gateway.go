// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"
import gateway "github.com/vmware/dispatch/pkg/api-manager/gateway"
import mock "github.com/stretchr/testify/mock"

// Gateway is an autogenerated mock type for the Gateway type
type Gateway struct {
	mock.Mock
}

// AddAPI provides a mock function with given fields: ctx, api
func (_m *Gateway) AddAPI(ctx context.Context, api *gateway.API) (*gateway.API, error) {
	ret := _m.Called(ctx, api)

	var r0 *gateway.API
	if rf, ok := ret.Get(0).(func(context.Context, *gateway.API) *gateway.API); ok {
		r0 = rf(ctx, api)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gateway.API)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *gateway.API) error); ok {
		r1 = rf(ctx, api)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAPI provides a mock function with given fields: ctx, api
func (_m *Gateway) DeleteAPI(ctx context.Context, api *gateway.API) error {
	ret := _m.Called(ctx, api)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *gateway.API) error); ok {
		r0 = rf(ctx, api)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAPI provides a mock function with given fields: ctx, name
func (_m *Gateway) GetAPI(ctx context.Context, name string) (*gateway.API, error) {
	ret := _m.Called(ctx, name)

	var r0 *gateway.API
	if rf, ok := ret.Get(0).(func(context.Context, string) *gateway.API); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gateway.API)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAPI provides a mock function with given fields: ctx, name, api
func (_m *Gateway) UpdateAPI(ctx context.Context, name string, api *gateway.API) (*gateway.API, error) {
	ret := _m.Called(ctx, name, api)

	var r0 *gateway.API
	if rf, ok := ret.Get(0).(func(context.Context, string, *gateway.API) *gateway.API); ok {
		r0 = rf(ctx, name, api)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gateway.API)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *gateway.API) error); ok {
		r1 = rf(ctx, name, api)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
