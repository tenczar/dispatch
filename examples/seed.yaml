kind: BaseImage
name: nodejs6-base
dockerUrl: vmware/dispatch-nodejs6-base:0.0.1-dev1
language: nodejs6
tags:
  - key: role
    value: test
---
kind: BaseImage
name: python3-base
dockerUrl: vmware/dispatch-python3-base:0.0.1-dev1
language: python3
tags:
  - key: role
    value: test
---
kind: BaseImage
name: powershell-base
dockerUrl: vmware/dispatch-powershell-base:0.0.1-dev1
language: powershell
tags:
  - key: role
    value: test
---
kind: Image
name: nodejs6
baseImageName: nodejs6-base
tags:
  - key: role
    value: test
---
kind: Image
name: python3
baseImageName: python3-base
runtimeDependencies:
  manifest: requests
tags:
  - key: role
    value: test
---
kind: Image
name: powershell
baseImageName: powershell-base
tags:
  - key: role
    value: test
---
kind: Function
name: hello-py
code: |
  #!/usr/bin/env python
  #######################################################################
  ## Copyright (c) 2017 VMware, Inc. All Rights Reserved.
  ## SPDX-License-Identifier: Apache-2.0
  #######################################################################
  """
  Example function "Hello World"

  ** REQUIREMENTS **

  * image
  dispatch create base-image python3 vmware/dispatch-openfaas-python-base:0.0.5-dev1 --language python3
  dispatch create image python3 python3

  Create a function:
  dispatch create function python3 hello-python examples/python3/hello.py

  Execute it:
  dispatch exec hello-python --wait --input='{"name": "Jon", "place": "Winterfell"}'

  """

  def handle(ctx, payload):
      name = payload.get("name", "Noone")
      place = payload.get("place", "Nowhere")
      return {"myField": "Hello, %s from %s" % (name, place)}
image: python3
schema: {}
tags:
  - key: role
    value: test 
---
kind: Function
name: http-py
code: |
  import time

  import requests

  def handle(ctx, payload):
      resp = requests.get("http://example.com")
      return {"status": resp.status_code}
image: python3
schema: {}
tags:
  - key: role
    value : test
---
kind: Function
name: hello-js
code: |
  module.exports = function (context, params) {
      let name = "Noone";
      if (params.name) {
          name = params.name;
      }
      let place = "Nowhere";
      if (params.place) {
          place = params.place;
      }
      return {myField: 'Hello, ' + name + ' from ' + place}
  };
image: nodejs6
schema:
  in:
    properties:
      name:
        minLength: 1
        pattern: "^[A-Za-z]+$"
        type: string
      place:
        minLength: 1
        pattern: "^[A-Za-z]+$"
        type: string
    required:
    - name
  out:
    properties:
      myField:
        type: string
    required:
    - myField
tags:
  - key: role
    value: test
---
kind: Function
name: hello-ps1
code: |+
  #######################################################################
  ## Copyright (c) 2017 VMware, Inc. All Rights Reserved.
  ## SPDX-License-Identifier: Apache-2.0
  #######################################################################


  function handle($context, $payload) {

      $name = $payload.name
      if (!$name) {
          $name = "Noone"
      }
      $place = $payload.place
      if (!$place) {
          $place = "Nowhere"
      }

      return @{myField="Hello, $name from $place"}
  }


image: powershell
schema: {}
tags: 
  - key: role
    value:  test
---
kind: Secret
name: open-sesame
secrets:
  password: OpenSesame
tags:
  - key: role
    value: test
